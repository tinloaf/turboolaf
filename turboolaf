#!/usr/bin/env python3

import copy
import json
import time
import datetime
import optparse
import os
import sys
import curses
import string

from decimal import Decimal
import uuid


# Check that there is no product anymore that depends on this product
def product_dependencies_resolvable(invoice, code):
    for c, product in invoice.items():
        for dep in product.get('dependencies', []):
            if dep['id'] == code:
                return False
    return True

def resolve_invoice_dependencies(invoice):
    invoice = copy.deepcopy(invoice)
    changes = 1
    while changes > 0:
        changes = 0
        for code, product in invoice.items():
            if not product_dependencies_resolvable(invoice, code):
                continue
            for dependency in product.get('dependencies', []):
                changes += 1
                invoice[dependency['id']]['quantity'] += product['quantity'] * dependency.get('quantity', 1)
            invoice[code]["dependencies"] = []
    return invoice

def get_total_price(invoice):
    invoice = resolve_invoice_dependencies(invoice)
    total_price = Decimal(0)
    for code, product in invoice.items():
        billed_price = Decimal(str(product.get('price', 0))) * Decimal(str(product.get('quantity')))
        total_price += billed_price
    return total_price

def get_qif(invoice):
    qif = "!Type:Cash\n"
    qif += "T" + str(get_total_price(invoice)) + "\n"
    qif += "D" + time.strftime("%d") + "/" + time.strftime("%m") + "' " + time.strftime("%y") + "\n"
    qif += "MBierminister Verkauf\n"
    qif += "^"
    return qif

### START OF UI OPERATIONS ###
win = None
list_win = None
def get_input(break_char_str="\n", break_chars=[]):
    buf = ""
    while True:
        ch = win.getch(1,(2+len(buf)))
        need_full_update = True

        # Control sequences
        if (ch == 0x1B): # ESC
            ch = win.getch(1,(2+len(buf)))
            if (ch == 0x5B): # [
                ch = win.getch(1,(2+len(buf)))
                update_screen("", buf)
                return (None, ch)
        
        if ((len(buf) == 0) and ((chr(ch) in break_char_str) or (ch in break_chars))):
            # Special command
            return (buf, ch)
        if (ch == 0x0A):
            # Line feed. Return buffer
            return (buf, ch)
        if ((ch > 0x1F) and (ch < 0x7F)):
            # Don't update the whole screen
            need_full_update = False
            buf += chr(ch)
        if (ch == 0x7F): # Backspace
            buf = buf[:-1]

        if need_full_update:
            update_screen("", buf)
        else:
            # Just write the first line again
            maxyx = win.getmaxyx()
            win.addstr(1, 1, " " * (maxyx[1] - 2))
            win.addstr(1, 2, buf)    
            
product_times = {}
def get_product_by_position(pos):
    pos_list = sorted(product_times.items(), key = lambda item: item[1], reverse = True)

    if pos >= len(pos_list):
        return None
    else:
        return pos_list[pos][0]

def update_product(product_code, delta):
    invoice[product_code]["quantity"] += delta
    product_times[product_code] = time.time()
    
def update_screen(message, input="", highlight_line=-1):
    global win
    global list_win
    
    # Update list.
    list_win.clear()
    list_win.box()
    maxyx = win.getmaxyx()
    line = 1
    grand_total = Decimal('0.0')
    code = get_product_by_position(line-1)
    while code != None:
        product = invoice[code]
        if (line == highlight_line):
            color = curses.color_pair(2)
        else:
            color = curses.color_pair(1)

        # Background
        list_win.addstr(line, 2, " " * (list_win.getmaxyx()[1] - 4), color)
                
        # Quantity
        list_win.addstr(line, 2, "%02d" % (product["quantity"]), color)
        # Name
        list_win.addstr(line, 5, "x %s" % (product['name']), color)
        # Price
        price = Decimal(str(product['price']))
        total_item = price * product["quantity"]
        grand_total += total_item

        list_win.addstr(line, (list_win.getmaxyx()[1] - 20), "%s € (%s €)" % (total_item, price),  color)
        
        line += 1
        code = get_product_by_position(line-1)

    # Display message
    win.addstr(2, 1, " " * (maxyx[1] - 2))
    win.addstr(2, 2, message)

    # Current input
    win.addstr(1, 1, " " * (maxyx[1] - 2))
    win.addstr(1, 2, input)    

    # Display grand total
    win.addstr(maxyx[0] - 7, maxyx[1] - 40, "Grand Total: %s €" % (grand_total))

    # Postition the cursor
    win.move(2,2)
    curses.setsyx(2,2)
    
    list_win.refresh()
    win.refresh()

def ui_select_mode():
    global win
    global list_win

    line = 1
    update_screen("-> Select mode. Press Enter to return. <-", highlight_line=line)
    while True:
        current_code = get_product_by_position((line - 1))
        ch = win.getch(1,1)
        if (ch == 0x0A): # RET
            update_screen("Left Select mode")
            return

        # Quantity modification
        if current_code != None:
            product = invoice[current_code]
            if (ch == 0x2B): # +
                # We circumvent updating the timestamp here
                product['quantity'] += 1
            if (ch == 0x2D): # -
                product['quantity'] -= 1
            
        # Control sequences
        if (ch == 0x1B): # ESC
            ch = win.getch(1,1)
            if (ch == 0x5B): # [
                ch = win.getch(1,1)

                if ch == 66: # UP
                    line += 1
                    if (line > len(product_times)):
                        line = len(product_times)
                if ch == 65: # DOWN
                    line -= 1
                    if (line < 1):
                        line = 1
        
        update_screen("-> Select mode. Press Enter to return. <-", highlight_line=line)
    
def init_screen():
    global win
    global list_win
    win = curses.initscr()
    curses.echo()
    # Kein line-buffer
    #curses.cbreak()
    
    # Farben
    curses.start_color()
    curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_WHITE)
    curses.init_pair(1, curses.COLOR_YELLOW, curses.COLOR_BLACK)
 
    # Hintergrundfarben
    win.bkgd(curses.color_pair(1))
    win.box()
    maxyx = win.getmaxyx()

    list_win = win.subwin(maxyx[0]-10, maxyx[1], 3, 0)
    list_win.box()

    update_screen("Welcome to TurboOlaf!")

### END OF UI OPERATIONS ###

def get_invoice_ascii(invoice, width=60):
    invoice_string = ""
    invoice_string += "*" * width + "\n"
    invoice_string += "K1 Getränkeverkauf".center(width) + "\n"
    invoice_string += time.strftime("%d %b %Y %H:%M:%S").center(width) + "\n"
    invoice_string += ("ID: " + invoice_id).center(width) + "\n"
    invoice_string += "*" * width + "\n\n"

    for code, product in invoice.items():
        price = Decimal(str(product.get('price', 0)))
        if product["quantity"] != 0 and price != 0:
            billed_price = price * Decimal(str(product["quantity"]))
            billing_string = str(price).rjust(5) + \
                    str(" x " + str(product["quantity"])).rjust(6) + \
                    " = " + \
                    str(billed_price).rjust(6)

            name_string = product["name"].ljust(width - len(billing_string))
            invoice_string += name_string + billing_string + "\n"

    invoice_string += "-" * width + "\n"
    invoice_string += "Total:" + str(get_total_price(invoice)).rjust(width - 6) + "\n"

    return invoice_string

def get_entered_items_ascii(invoice):
    entered_items_string = ""
    for code, product in invoice.items():
        if product["quantity"] != 0:
            entered_items_string += str(product["quantity"]).rjust(4) + " x " + product["name"] + "\n"
    entered_items_string += "Total: " + str(get_total_price(invoice))
    return entered_items_string

def get_product_code(invoice, code):
    try:
        invoice[code]
        return code
    except KeyError:
        pass
    for codename, product in invoice.items():
        if code in product.get('alias', []):
            return codename
    return None

# add a --file argument and parse the arguments
parser = optparse.OptionParser()
parser.add_option("-f", "--file", dest = "filename", help = "load invoice from SOURCE", metavar = "SOURCE")
(options, args) = parser.parse_args()

# load an invoice from file or, if no file was given, use the default invoice prototype
if options.filename:
    invoice = json.load(open(options.filename))
else:
    invoice = json.load(open("invoice_prototype.olaf"))

#TODO: Maybe make this unique...?
invoice_id = str(int(time.time()))

# set the quantity of all products to 0
#print(invoice)
for code, product in invoice.items():
    product["quantity"] = 0

init_screen()
previous_product_code = None
while True:
    try:
        (entered, break_ch) = get_input("+-", [curses.KEY_UP, curses.KEY_DOWN])
    except EOFError:
        break
    except KeyboardInterrupt:
        print("\nCaught SIGINT, exiting...\n")
        sys.exit(1)

    # end if an input was given
    if break_ch == ord('\n'):    
        # end if an input was given
        if not entered:
            break
        else:
            if entered[0] == '$':
                # the input is a Sonderposten
                try:
                    special_product = {}
                    special_id = str(uuid.uuid4())
                    invoice[special_id]['quantity'] = 0
                    update_product(special_id, 1)
                    try:
                        special_name = entered[1:].split(' ')[1]
                    except IndexError:
                        special_name = "Sonderposten"
                    special_product['name'] = special_name
                    special_product['price'] = Decimal(entered[1:].split(' ')[0])
                    previous_product_code = special_id
                    # only if nothing of the above failed, write the above
                    invoice.update({
                            special_id: special_product
                            })
                except:
                    update_screen("Invalid Sonderposten format!")
            else:
                # the input is not a Sonderposten
                if entered[0] in string.ascii_letters:
                    code = get_product_code(invoice, entered)
                    # the input starts with a letter and will be followed by a product id
                    if not code:
                        update_screen("Invalid product code " + entered[1:] + " entered")
                    else:
                        previous_product_code = code
                        update_screen("Entered " + invoice[code]["name"])
                        update_product(code, 1)
                else:
                    if len(entered) >= 8:
                        # a code was scanned
                        code = get_product_code(invoice, entered)
                        # the input starts with a letter and will be followed by a product id
                        if not code:
                            update_screen("Invalid product code " + entered[1:] + " entered")
                        else:
                            previous_product_code = code
                            update_product(code, 1)
                            update_screen("Scanned " + invoice[code]["name"])
                    else:
                        # a quantity was entered
                        if previous_product_code:
                            try:
                                update_product(previous_product_code, (int(entered) - 1))
                                update_screen("Added another " + str(int(entered) - 1) + " " + invoice[previous_product_code]["name"])
                                previous_product_code = None
                            except ValueError:
                                update_screen("No valid quantity entered")
                        else:
                            update_screen("No previous product entered!")

    else: # Hardcore shortcut action
        if (entered == None): # CTRL-Sequence
            if (break_ch == 65) or (break_ch == 66): # Up, Down
                ui_select_mode()
                
        if (break_ch == 0x2B) or (break_ch == 0x2D): # + / -
            if previous_product_code:
                try:
                    if (break_ch == 0x2B):
                        delta = 1
                    else:
                        delta = -1
                    update_product(previous_product_code, delta)
                    update_screen("Modified " + invoice[previous_product_code]["name"] + " by " + str(delta))
                except ValueError:
                    update_screen("No valid quantity entered")
            else:
                update_screen("No previous product entered!")
            
curses.endwin()

print(get_invoice_ascii(resolve_invoice_dependencies(invoice)))

# TODO: write this out in a sorted manner e.g. yyyy/mm/dd/id.olaf
invoice_file = open("invoices/" + invoice_id + ".json", 'w')
invoice_file.write(json.dumps(invoice, indent=4))
invoice_file.close()

qif_file = open("qif/" + invoice_id + ".qif", 'w')
qif_file.write(get_qif(invoice))
qif_file.close()
