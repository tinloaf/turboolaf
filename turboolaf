#!/usr/bin/env python3

import json
import time
import datetime
import curses
import curses.textpad
import optparse
import sys
import os
import string

from decimal import Decimal
import uuid

def resolve_invoice_dependencies(invoice):
    # TODO: be filled by xhochy
    return invoice

def get_total_price(invoice):
    total_price = Decimal(0)
    for code, product in invoice.items():
        billed_price = Decimal(str(product["price"])) * Decimal(str(product["quantity"]))
        total_price += billed_price
    return total_price

def get_qif(invoice):
    qif = "!Type:Cash\n"
    qif += "T" + str(get_total_price(invoice)) + "\n"
    qif += "D" + time.strftime("%d") + "/" + time.strftime("%m") + "' " + time.strftime("%y") + "\n"
    qif += "MBierminister Verkauf\n"
    qif += "^"
    return qif

win = None
list_win = None
def update_screen(message):
    global win
    global list_win
    
    # Update list.
    list_win.clear()
    list_win.box()
    maxyx = win.getmaxyx()
    line = 1
    grand_total = Decimal('0.0')
    for code, product in invoice.items():
        if product["quantity"] > 0:
            # Quantity
            list_win.addstr(line, 2, "%02d" % (product["quantity"]))
            # Name
            list_win.addstr(line, 5, "x %s" % (product['name']))
            # Price
            price = Decimal(str(product['price']))
            total_item = price * product["quantity"]
            grand_total += total_item
            list_win.addstr(line, (list_win.getmaxyx()[1] - 20), "%s € (%s €)" % (total_item, price))        
        
            line += 1

    # Display message
    win.addstr(2, 1, " " * (maxyx[1] - 2))
    win.addstr(2, 2, message)

    # Display grand total
    win.addstr(maxyx[0] - 7, maxyx[1] - 40, "Grand Total: %s €" % (grand_total))

    # Postition the cursor
    win.move(2,2)
    curses.setsyx(2,2)
    
    list_win.refresh()
    win.refresh()
    
def init_screen():
    global win
    global list_win
    win = curses.initscr()
    curses.echo()
    # Kein line-buffer
    #curses.cbreak()
    
    # Farben
    curses.start_color()
    curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_WHITE)
    curses.init_pair(1, curses.COLOR_YELLOW, curses.COLOR_BLACK)
 
    # Hintergrundfarben
    win.bkgd(curses.color_pair(1))
    win.box()
    maxyx = win.getmaxyx()

    list_win = win.subwin(maxyx[0]-10, maxyx[1], 3, 0)
    list_win.box()

    update_screen("Welcome to TurboOlaf!")
    
def get_invoice_ascii(invoice, width=60):
    invoice_string = ""
    invoice_string += "*" * width + "\n"
    invoice_string += "K1 Getränkeverkauf".center(width) + "\n"
    invoice_string += time.strftime("%d %b %Y %H:%M:%S").center(width) + "\n"
    invoice_string += ("ID: " + invoice_id).center(width) + "\n"
    invoice_string += "*" * width + "\n\n"

    for code, product in invoice.items():
        if product["quantity"] > 0:
            billed_price = Decimal(str(product["price"])) * Decimal(str(product["quantity"]))
            billing_string = str(product["price"]).rjust(5) + \
                    str(" x " + str(product["quantity"])).rjust(6) + \
                    " = " + \
                    str(billed_price).rjust(6)

            name_string = product["name"].ljust(width - len(billing_string))
            invoice_string += name_string + billing_string + "\n"

    invoice_string += "-" * width + "\n"
    invoice_string += "Total:" + str(get_total_price(invoice)).rjust(width - 6) + "\n"

    return invoice_string

# add a --file argument and parse the arguments
parser = optparse.OptionParser()
parser.add_option("-f", "--file", dest = "filename", help = "load invoice from SOURCE", metavar = "SOURCE")
(options, args) = parser.parse_args()

# load an invoice from file or, if no file was given, use the default invoice prototype
if options.filename:
    invoice = json.load(open(options.filename))
else:
    invoice = json.load(open("invoice_prototype.olaf"))

print("Welcome to TurboOlaf!")

#TODO: Maybe make this unique...?
invoice_id = str(int(time.time()))

# set the quantity of all products to 0
print(invoice)
for code, product in invoice.items():
    product["quantity"] = 0

init_screen()
    
previous_product_code = None
while True:
    entered = str(win.getstr(1,1))[2:-1] # yeah. don't ask. string conversion fuckup.

    # end if an input was given
    if not entered:
        break
    else:
        if entered[0] == '$':
            # the input is a Sonderposten
            try:
                special_product = {}
                special_id = str(uuid.uuid4())
                invoice[special_id]['quantity'] = 1
                try:
                    special_name = entered[1:].split(' ')[1]
                except IndexError:
                    special_name = "Sonderposten"
                special_product['name'] = special_name
                special_product['price'] = Decimal(entered[1:].split(' ')[0])
                previous_product_code = special_id
                # only if nothing of the above failed, write the above
                invoice.update({
                    special_id: special_product
                    })
            except:
                update_screen("Invalid Sonderposten format!")
        else:
            # the input is not a Sonderposten
            if entered[0] in string.ascii_letters:
                # the input starts with a letter and will be followed by a product id
                previous_product_code = None
                for code, product in invoice.items():
                    if code == entered[1:]:
                        previous_product_code = code
                        product["quantity"] += 1
                        update_screen("Added " + invoice[code]["name"])
                if not previous_product_code:                    
                    update_screen("Invalid product code " + entered[1:] + " entered")
            else:
                if len(entered) > 10:
                    # a code was scanned
                    for code, product in invoice.items():
                        if code == entered:
                            previous_product_code = code
                            product["quantity"] += 1
                            update_screen("Scanned " + invoice[code]["name"])
                            
                else:
                    # a quantity was entered
                    if previous_product_code:
                        try:
                            invoice[previous_product_code]["quantity"] += int(entered) - 1
                            update_screen("Added another " + str(int(entered) - 1) + " " + invoice[previous_product_code]["name"])
                            previous_product_code = None
                        except ValueError:
                            update_screen("No valid quantity entered")
                    else:
                        update_screen("No previous product entered!")

curses.endwin()

print(get_invoice_ascii(invoice))

# TODO: write this out in a sorted manner e.g. yyyy/mm/dd/id.olaf
invoice_file = open("invoices/" + invoice_id + ".json", 'w')
invoice_file.write(json.dumps(invoice, indent=4))
invoice_file.close()

qif_file = open("qif/" + invoice_id + ".qif", 'w')
qif_file.write(get_qif(invoice))
qif_file.close()
